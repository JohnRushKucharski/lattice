'''Tests diagram.py'''

import unittest

from lattice.node import Inflow, Outlet
from lattice.diagram import (process_middle_layer, process_outlet_layer,
                             flatten_layer, link_layers)

class TestProcessOutletLayer(unittest.TestCase):
    '''Tests validate outlet layer system diagram utility function.'''
    def test_no_nodes_raises_value_error(self):
        '''Test validate outlet layer.'''
        with self.assertRaises(ValueError):
            process_outlet_layer([])
    def test_multiple_nodes_raises_value_error(self):
        '''Test validate outlet layer.'''
        node1 = Outlet()
        node2 = Outlet()
        with self.assertRaises(ValueError):
            process_outlet_layer([node1, node2])
    def test_multiple_lists_raises_value_error(self):
        '''Test validate outlet layer.'''
        node1 = Outlet()
        node2 = Outlet()
        layer = [[node1], [node2]]
        with self.assertRaises(ValueError):
            process_outlet_layer(layer)
    def test_inflow_node_raises_value_error(self):
        '''Test validate outlet layer.'''
        node = Inflow([])
        with self.assertRaises(ValueError):
            process_outlet_layer([node])

class TestProcessMiddleLayer(unittest.TestCase):
    '''Tests process layer system diagram utility function.'''
    def test_single_node_returns_tuple(self):
        '''Test process layer.'''
        node1 = Inflow([])
        layer = [node1]
        self.assertEqual(process_middle_layer(layer), [])

class TestFlattenLayer(unittest.TestCase):
    '''Tests flatten layer system diagram utility function.'''
    def test_flat_layer_returns_input(self):
        '''Test flatten layer.'''
        node1 = 'node1'
        node2 = 'node2'
        layer = [node1, node2]
        self.assertEqual(flatten_layer(layer), layer)
    def test_single_nested_layer_returns_inner_list(self):
        '''Test flatten layer.'''
        node1 = 'node1'
        node2 = 'node2'
        layer = [[node1, node2]]
        self.assertEqual(flatten_layer(layer), layer[0])
    def test_multiple_nested_layers_returns_flattened_list(self):
        '''Test flatten layer.'''
        node1 = 'node1'
        node2 = 'node2'
        node3 = 'node3'
        node4 = 'node4'
        layer = [[node1, node2], [node3, node4]]
        self.assertEqual(flatten_layer(layer), [node1, node2, node3, node4])
    def test_mixed_lists_and_nodes_returns_flattened_list(self):
        '''Test flatten layer.'''
        node1 = 'node1'
        node2 = 'node2'
        node3 = 'node3'
        node4 = 'node4'
        layer = [node1, [node2, node3], node4]
        self.assertEqual(flatten_layer(layer), [node1, node2, node3, node4])

class TestLinkLayers(unittest.TestCase):
    '''Tests connect nodes system diagram utility function.'''
    def test_single_node_to_single_node(self):
        '''Test connect nodes.'''
        node1 = Outlet()
        node2 = Inflow([])
        layer1 = [node1]
        layer2 = [node2]
        link_layers(layer1, layer2, (0, 0))
        self.assertEqual(node1.senders(), {node2})
    def test_single_node_to_multiple_nodes(self):
        '''Test connect nodes.'''
        node1 = Outlet()
        node2 = Inflow([])
        node3 = Inflow([])
        layer1 = [node1]
        layer2 = [[node2, node3]]
        link_layers(layer1, layer2, (0, 0))
        self.assertEqual(node1.senders(), {node2, node3})
